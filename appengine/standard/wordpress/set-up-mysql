#!/bin/bash

db_tier=$1

function die() {
  echo "$@"
  exit 1
}

if [[ -z "$db_tier" ]]; then
  die "Usage: $0 [DB_TIER] [DB_INSTANCE] [DB_NAME] [DB_PASS]

This command creates a Cloud SQL instance and waits for it to be ready.

DB_TIER is the tier of the Cloud SQL instance to create, for example
db-f1-micro for testing or db-n1-standard-1 for production. See
https://cloud.google.com/sql/pricing for a list of db tiers and their prices.

DB_INSTANCE is the name of the MySQL instance to create.

DB_NAME is the name of the database to create within the MySQL instance.

DB_PASS is the root password to set for the instance.
"
fi

set -u
set -o pipefail

log=$(mktemp)

echo "Setting up a Cloud SQL instance. Run 'tail -f $log' for details."
gcloud sql instances create $db_instance --tier=$db_tier --region=us-central1 \
  --async &>$log || die "Failed to start creating a Cloud SQL instance."
job=$(grep '^name:' $log | sed 's/^name: *//')
if [[ $? != 0 ]]; then
  die "Failed to find SQL instance creation job name in $log."
fi
while true; do
  gcloud beta sql operations wait $job &>$log
  if [[ $? != 0 ]]; then
    if ! grep 'is taking longer than expected' $log >/dev/null; then
      die "Failed to create Cloud SQL instance: $(cat $log)"
    fi
    # gcloud timed out while waiting. Try again.
  else
    # gcloud finished waiting.
    break
  fi
done
gcloud sql users set-password root % --instance $db_instance --password \
  $db_pass &>$log \
  || die "Failed to set db root password to $db_pass: $(cat $log)"
gcloud sql databases create $db_name --instance=$db_instance \
  &>$log || die "Failed to create database $db_name: $(cat $log)"
